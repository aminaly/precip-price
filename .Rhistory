install.packages("dataseries")
install.packages("datasets.load")
library(datasets)
?datasets
data("iris")
data(iris)
summary(iris)
a <- data(iris)
iew(iris)
View(data("iris"))
View(data(iris))
View(iris)
summary(iris)
summary(iris)
install.packages("data.table")
as.data.table(iris)
library(data.table)
summary(iris)
as.data.table(iris)
iris
as.data.table(iris)
iris[Sepal.Width > 3]
iris <- as.data.table(iris)
iris[Sepal.Width > 3]
iris[Sepal.Width > 4,.(Sepal.Length, Species)]
sepal_greater_three <- iris[Sepal.Width > 3]
iris
sepal_greater_three
#give me petal.length and petal.width + 1 for every record with a sepal.length
#greater than 5 BY species
iris[Sepal.Length > 5,.(PL = sum(Petal.Length), PW = sum(Petal.Width)),.(Species)]
install.packages("extRemes")
?extRemes
?extremes
library(extRemes)
?extRemes
data(HEAT)
HEAT
?return.level
?fevd
fevd(HEAT)
fevd(HEAT[,1])
HEAT <- as.data.table(HEAT)
f_heat <- fevd(HEAT[,Tmax])
return.level(f_heat, c(5,10,50))
return.level(f_heat, c(5,15,50))
return.level(f_heat, c(1, 5,15,50))
return.level(f_heat, c(2, 5,15,50))
return.level(f_heat, c(2, 5,15,50, 200))
118/116
200 / 116
install.packages("ncdf4")
ftp://ftp.cdc.noaa.gov/Datasets/cpc_global_precip/precip.1979.nc
library(ncdf4)
download.file("ftp://ftp.cdc.noaa.gov/Datasets/cpc_global_precip/precip.1979.nc", "here.nc")
precip <- nc_open("here.nc")
precip
water <- ncvar_get(precip)
water
?ncvar_get
download.file("ftp://ftp.cdc.noaa.gov/Datasets/cpc_global_precip/precip.1990.nc", "here.nc")
precip <- nc_open("here.nc")
water <- ncvar_get(precip)
View(water)
water
install.packages("ismev")
library(ismev)
install.packages("extRemes")
install.packages("extRemes")
install.packages("extRemes")
R.home()
install.packages("ismev", lib  = "/Users/amina/anaconda2/lib/R/library")
install.packages("extRemes", lib = "/Users/amina/anaconda2/lib/R/library")
install.packages("extRemes", lib = "/Users/amina/anaconda2/lib/R/library")
install.packages("extRemes", lib = "/Users/amina/anaconda2/lib/R/library")
install.packages("mgcv", lib = "/Users/amina/anaconda2/lib/R/library")
install.packages("mgcv", lib = "/Users/amina/anaconda2/lib/R/library")
install.packages("nlme", lib = "/Users/amina/anaconda2/lib/R/library")
install.packages("nlme", lib = "/Users/amina/anaconda2/lib/R/library")
install.packages("lattice", lib = "/Users/amina/anaconda2/lib/R/library")
install.packages("lattice", lib = "/Users/amina/anaconda2/lib/R/library")
detach("package:graphics", unload=TRUE)
detach("package:grDevices", unload=TRUE)
detach("package:methods", unload=TRUE)
detach("package:stats", unload=TRUE)
detach("package:utils", unload=TRUE)
install.packages("Matrix", lib = "/Users/amina/anaconda2/lib/R/library")
install.packages(c("car", "data.table", "digest", "DT", "htmlwidgets", "lme4", "MASS", "Matrix", "mgcv", "nlme", "quantreg", "Rcpp", "RcppEigen", "rpart", "yaml"))
library("tools", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
install.packages("Matrix", lib = "/Users/amina/anaconda2/lib/R/library")
install.packages("Matrix", lib = "/Users/amina/anaconda2/lib/R/library")
install.packages("Matrix", lib = "/Users/amina/anaconda2/lib/R/library")
library(extRemes)
val <- 7.392210
fevd(val, verbose=T)
debug(fevd)
library(extRemes)
val <- 7.392210
fevd(val, verbose=T)
ipars2
?fevd
data <- read.csv("/Users/amina/Documents/example.csv")
data
?file.exists
?tryCatch
tryCatch(stop(e), error = function(e) e, finally = print("Hello"))
e <- 44
tryCatch(stop(e), error = function(e) e, finally = print("Hello"))
}
?POT
??POT
?EVT
?extRemes
setwd("/Users/amina/Documents/Stanford/precip-price")
library(lfe)
library(dplyr)
library(extRemes)
library(lubridate)
buf <- 1
rdsname <- paste0("precip/", buf, "_precip.rds")
precip <- readRDS(rdsname)
precipname <- paste0("precip/", buf, "_ppdata.csv")
run_daily <- TRUE
include_zeros <- FALSE
## Get data for each commodity
#lets get the sorghum we want specificially & merge in seasonality
sorghum <- filter_grain(pp_data, "Sorghum")
source('~/Documents/Stanford/precip-price/Functions for Analysis.R', echo=TRUE)
buf <- 1
rdsname <- paste0("precip/", buf, "_precip.rds")
precip <- readRDS(rdsname)
precipname <- paste0("precip/", buf, "_ppdata.csv")
run_daily <- TRUE
include_zeros <- FALSE
source('~/Documents/Stanford/precip-price/Functions for Analysis.R', echo=TRUE)
rdsname <- paste0("precip/", buf, "_precip.rds")
precip <- readRDS(rdsname)
head(precip)
# Let's get hte price data
price <- readRDS("saved-output/formatted-price.rds")
## SORGHUM
#lets get the sorghum we want specificially & merge in seasonality
sorghum <- filter_grain(pp_data, "Sorghum")
sorghum <- merge_seasons(sorghum, "sorghum")
#get locations with the right set of dates
sorghum <- filter_dates(sorghum, "Sorghum")
source('~/Documents/Stanford/precip-price/Functions for Analysis.R', echo=TRUE)
## SORGHUM
#lets get the sorghum we want specificially & merge in seasonality
sorghum <- filter_grain(pp_data, "Sorghum")
?str_detect
library(stringr)
## SORGHUM
#lets get the sorghum we want specificially & merge in seasonality
sorghum <- filter_grain(pp_data, "Sorghum")
sorghum <- merge_seasons(sorghum, "sorghum")
#get locations with the right set of dates
sorghum <- filter_dates(sorghum, "Sorghum")
#calcualte precip for correct set of dates
#doing this first because otherwise we end up with some zeros at the end
sorghum <- calc_precip(sorghum)
sorghum
head(sorghum)
unique(sorghum$location)[1]
loc <- unique(sorghum$location)[1]
subset <- sorghum %>% filter(location == loc)
subset
head(subset)
quantile(subset$avg_rainfall, probs=c(0.95))
cutoff <- quantile(subset$avg_rainfall, probs=c(0.95))
s <- sorghum %>% filter(avg_rainfall > cutoff )
s
s <- subset%>% filter(avg_rainfall > cutoff )
s
a <- get_extreme_days(sorghum)
nrow(a)
b <- calc_extreme(a)
b <- calc_extreme(a, 1)
View(b)
nrow(a)
a
head(a)
unique(a$location)
debugSource('~/Documents/Stanford/precip-price/Functions for Analysis.R', echo=TRUE)
debug(get_extreme_days)
a <- get_extreme_days(sorghum)
##get extreme days
#currently just getting the quantiles and picking everything at or above 95% percentile BY LOCATION
get_extreme_days <- function(data) {
to_return <- c()
for(loc in unique(data$location)) {
subset <- data %>% filter(location == loc)
cutoff <- quantile(data$avg_rainfall, probs=c(0.95))
to_return <- rbind(to_return, subset %>% filter(avg_rainfall > cutoff))
}
return(to_return)
}
debug(get_extreme_days)
a <- get_extreme_days(sorghum)
unique(data$location)
nrow(sorghum)
unique(sorghum$location)
## SORGHUM
#lets get the sorghum we want specificially & merge in seasonality
sorghum <- filter_grain(pp_data, "Sorghum")
unique(sosrghum$location)
unique(sorghum$location)
sorghum <- merge_seasons(sorghum, "sorghum")
# Let's get hte price data
price <- readRDS("saved-output/formatted-price.rds")
#If you don't need to extract, just use this to get pp_data together. If you do, you'll need to run precip_extract
buf <- 2
rdsname <- paste0("precip/", buf, "_precip.rds")
precip <- readRDS(rdsname)
source('~/Documents/Stanford/precip-price/Functions for Analysis.R')
## SORGHUM
#lets get the sorghum we want specificially & merge in seasonality
sorghum <- filter_grain(pp_data, "Sorghum")
unique(sorghum$location)
source('~/Documents/Stanford/precip-price/Functions for Analysis.R', echo=TRUE)
# Let's get hte price data
price <- readRDS("saved-output/formatted-price.rds")
#If you don't need to extract, just use this to get pp_data together. If you do, you'll need to run precip_extract
buf <- 2
rdsname <- paste0("precip/", buf, "_precip.rds")
precip <- readRDS(rdsname)
source('~/Documents/Stanford/precip-price/Functions for Analysis.R')
## SORGHUM
#lets get the sorghum we want specificially & merge in seasonality
sorghum <- filter_grain(pp_data, "Sorghum")
unique(sorghum$location)
sorghum <- merge_seasons(sorghum, "sorghum")
unique(sorghum$location)
#get locations with the right set of dates
sorghum <- filter_dates(sorghum, "Sorghum")
unique(sorghum$location)
sorghum <- filter_grain(pp_data, "Sorghum")
sorghum <- merge_seasons(sorghum, "sorghum")
head(Sorghum)
head(sorghum)
dtes <- c()
for(loc in unique(sorghum$location)) {
sub <- sorghum %>% filter(location == loc)
dtes <- rbind(dtes, cbind(loc, min(sub$date), max(sub$date)))
}
dtes
dtes <- c()
for(loc in unique(sorghum$location)) {
sub <- sorghum %>% filter(location == loc)
dtes <- rbind(dtes, cbind(loc, as.Date(min(sub$date)), as.Date(max(sub$date))))
}
dtes
head(dtes)
dtes <- c()
for(loc in unique(sorghum$location)) {
sub <- sorghum %>% filter(location == loc)
dtes <- rbind(dtes, cbind(loc, as.Date.date(min(sub$date)), as.Date(max(sub$date))))
}
dtes <- c()
for(loc in unique(sorghum$location)) {
sub <- sorghum %>% filter(location == loc)
dtes <- rbind(dtes, cbind(loc, as.Date(min(sub$date)), as.Date(max(sub$date))))
}
dtes
dtes[1,2]
as.Dates(dtes[1,2])
as.Date(dtes[1,2])
head(sorghum)
dtes <- c()
for(loc in unique(sorghum$location)) {
sub <- sorghum %>% filter(location == loc)
dtes <- rbind(dtes, cbind(loc, as.Date(min(sub$period_date)), as.Date(max(sub$period_date))))
}
dtes
typeof(sorghum$date)
sorghum$date[1]
dtes <- c()
for(loc in unique(sorghum$location)) {
sub <- sorghum %>% filter(location == loc)
dtes <- rbind(dtes, cbind(loc, as.Date(min(sub$period_date), "%Y-%m-%d"), as.Date(max(sub$period_date), "%Y-%m-%d")))
}
dtes
dtes[,2] <- as.Date(dtes[,2])
dtes[,2] <- as.Date(dtes[,2], "%Y-%m-%d")
dtes
dtes[,2] <- as.Date(as.numeric(dtes[,2]), "%Y-%m-%d")
typeof(dtes;,2)
dtes <- c()
for(loc in unique(sorghum$location)) {
sub <- sorghum %>% filter(location == loc)
dtes <- rbind(dtes, cbind(loc, as.Date(min(sub$period_date), "%Y-%m-%d"), as.Date(max(sub$period_date), "%Y-%m-%d")))
}
dtes[,2] <- as.Date(as.numeric(dtes[,2]), "%Y-%m-%d")
dtes
head(dtes)
as.date(11718)
as.Date(11718)
as.Date(11718, "%Y-%m-%d")
unique(sorghum$location)[1]
a <- unique(sorghum$location)[1]
sub <- sorghum %>% filter(location == a)
sub
head(sub)
min(sub$date)
min(sub$period_date)
dtes <- c()
for(loc in unique(sorghum$location)) {
sub <- sorghum %>% filter(location == loc)
mini <- min(sub$date)
maxi <- max(sub$date)
dtes <- rbind(dtes, cbind(loc, mini, maxi))
}
head(dtes)
loc
sub <- sorghum %>% filter(location == loc)
sub
head(sub)
min(sub$date)
mini <- min(sub$date)
maxi <- max(sub$date)
mini
maxi
cbind(loc, mini, maxi)
dtes <- c()
for(loc in unique(sorghum$location)) {
sub <- sorghum %>% filter(location == loc)
mini <- min(sub[,c("date")])
maxi <- max(sub$date)
dtes <- rbind(dtes, cbind(loc, mini, maxi))
}
head(dtes)
dtes <- c()
for(loc in unique(sorghum$location)) {
sub <- sorghum %>% filter(location == loc)
mini <- min(sub[,c("date")])
maxi <- max(sub[,c("date")])
dtes <- rbind(dtes, cbind(loc, mini, maxi))
}
head(dtes)
dtes <- c()
for(loc in unique(sorghum$location)) {
sub <- sorghum %>% filter(location == loc)
mini <- min(sub[,c("date")])
maxi <- max(sub[,c("date")])
dtes <- rbind.data.frame(dtes, cbind(loc, mini, maxi))
}
head(dtes)
dtes$mini <- as.Date(dtes$mini)
sub <- sorghum %>% filter(location == loc)
mini <- min(sub[,c("date")])
mini
dtes <- c()
for(loc in unique(sorghum$location)) {
sub <- sorghum %>% filter(location == loc)
mini <- min(sub[,c("date")])
maxi <- max(sub[,c("date")])
dtes <- rbind.data.frame(dtes, cbind.data.frame(loc, mini, maxi))
}
head(dtes)
dtes <- c()
for(loc in unique(sorghum$location)) {
sub <- sorghum %>% filter(location == loc)
mini <- min(sub[,c("date")])
maxi <- max(sub[,c("date")])
dtes <- rbind(dtes, cbind.data.frame(loc, mini, maxi))
}
dtes
head(dtes)
write.csv(dtes, "sorghum_dates.csv")
View(dtes)
debug(filter_dates)
filter_dates(sorghum, "Sorghum")
breakdown
nrow(breakdown)
nrow(dtes)
sorghum <- filter_grain(pp_data, "Sorghum")
sorghum <- merge_seasons(sorghum, "sorghum")
dtes <- c()
for(loc in unique(sorghum$location)) {
sub <- sorghum %>% filter(location == loc)
mini <- min(sub[,c("date")])
maxi <- max(sub[,c("date")])
dtes <- rbind(dtes, cbind.data.frame(loc, mini, maxi))
}
nrow(dtes)
sorghum <- filter_grain(pp_data, "Sorghum")
sorghum <- merge_seasons(sorghum, "sorghum")
dtes <- c()
for(loc in unique(sorghum$location)) {
sub <- sorghum %>% filter(location == loc)
mini <- min(sub[,c("date")])
maxi <- max(sub[,c("date")])
dtes <- rbind(dtes, cbind.data.frame(loc, mini, maxi))
}
nrow(dtes)
loc
dtes
s <- sorghum %>% group_by(location, product)
nrow(s)
breakdown <- sorghum %>% group_by(location, product) %>%
summarize(minyear = as.Date(format(min(date, na.rm = T), "%m/%d/%Y"), "%m/%d/%Y"),
maxyear = as.Date(format(max(date, na.rm = T), "%m/%d/%Y"), "%m/%d/%Y"))
nrow(breakdown)
View(breakdown)
#note that these dates were chosen by checking for maximum overlap in data. Earliest date is 1 year before
#the intended time period for use in precip calculation. It is removed after precip calcs are done
dates <- switch(grn, "Sorghum" = c(as.Date("03/01/2008", "%m/%d/%Y"), as.Date("09/01/2017", "%m/%d/%Y")),
"Maize" = c(as.Date("05/02/2011", "%m/%d/%Y"), as.Date("12/27/2017", "%m/%d/%Y")),
"Millet" = c(as.Date("02/01/2010", "%m/%d/%Y"), as.Date("08/30/2018", "%m/%d/%Y")))
grn <- sorghum
#note that these dates were chosen by checking for maximum overlap in data. Earliest date is 1 year before
#the intended time period for use in precip calculation. It is removed after precip calcs are done
dates <- switch(grn, "Sorghum" = c(as.Date("03/01/2008", "%m/%d/%Y"), as.Date("09/01/2017", "%m/%d/%Y")),
"Maize" = c(as.Date("05/02/2011", "%m/%d/%Y"), as.Date("12/27/2017", "%m/%d/%Y")),
"Millet" = c(as.Date("02/01/2010", "%m/%d/%Y"), as.Date("08/30/2018", "%m/%d/%Y")))
grn <- "Sorghum"
#note that these dates were chosen by checking for maximum overlap in data. Earliest date is 1 year before
#the intended time period for use in precip calculation. It is removed after precip calcs are done
dates <- switch(grn, "Sorghum" = c(as.Date("03/01/2008", "%m/%d/%Y"), as.Date("09/01/2017", "%m/%d/%Y")),
"Maize" = c(as.Date("05/02/2011", "%m/%d/%Y"), as.Date("12/27/2017", "%m/%d/%Y")),
"Millet" = c(as.Date("02/01/2010", "%m/%d/%Y"), as.Date("08/30/2018", "%m/%d/%Y")))
data_markets <- breakdown %>%
filter(minyear >= dates[1]) %>%
filter(maxyear <= dates[2])
data_markets
nrow(data_markets)
data_markets <- breakdown %>%
filter(minyear >= dates[1]) %>%
filter(maxyear >= dates[2])
nrow(data_markets)
source('~/Documents/Stanford/precip-price/Functions for Analysis.R', echo=TRUE)
