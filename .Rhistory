install.packages("dataseries")
install.packages("datasets.load")
library(datasets)
?datasets
data("iris")
data(iris)
summary(iris)
a <- data(iris)
iew(iris)
View(data("iris"))
View(data(iris))
View(iris)
summary(iris)
summary(iris)
install.packages("data.table")
as.data.table(iris)
library(data.table)
summary(iris)
as.data.table(iris)
iris
as.data.table(iris)
iris[Sepal.Width > 3]
iris <- as.data.table(iris)
iris[Sepal.Width > 3]
iris[Sepal.Width > 4,.(Sepal.Length, Species)]
sepal_greater_three <- iris[Sepal.Width > 3]
iris
sepal_greater_three
#give me petal.length and petal.width + 1 for every record with a sepal.length
#greater than 5 BY species
iris[Sepal.Length > 5,.(PL = sum(Petal.Length), PW = sum(Petal.Width)),.(Species)]
install.packages("extRemes")
?extRemes
?extremes
library(extRemes)
?extRemes
data(HEAT)
HEAT
?return.level
?fevd
fevd(HEAT)
fevd(HEAT[,1])
HEAT <- as.data.table(HEAT)
f_heat <- fevd(HEAT[,Tmax])
return.level(f_heat, c(5,10,50))
return.level(f_heat, c(5,15,50))
return.level(f_heat, c(1, 5,15,50))
return.level(f_heat, c(2, 5,15,50))
return.level(f_heat, c(2, 5,15,50, 200))
118/116
200 / 116
install.packages("ncdf4")
ftp://ftp.cdc.noaa.gov/Datasets/cpc_global_precip/precip.1979.nc
library(ncdf4)
download.file("ftp://ftp.cdc.noaa.gov/Datasets/cpc_global_precip/precip.1979.nc", "here.nc")
precip <- nc_open("here.nc")
precip
water <- ncvar_get(precip)
water
?ncvar_get
download.file("ftp://ftp.cdc.noaa.gov/Datasets/cpc_global_precip/precip.1990.nc", "here.nc")
precip <- nc_open("here.nc")
water <- ncvar_get(precip)
View(water)
water
install.packages("ismev")
library(ismev)
install.packages("extRemes")
install.packages("extRemes")
install.packages("extRemes")
R.home()
install.packages("ismev", lib  = "/Users/amina/anaconda2/lib/R/library")
install.packages("extRemes", lib = "/Users/amina/anaconda2/lib/R/library")
install.packages("extRemes", lib = "/Users/amina/anaconda2/lib/R/library")
install.packages("extRemes", lib = "/Users/amina/anaconda2/lib/R/library")
install.packages("mgcv", lib = "/Users/amina/anaconda2/lib/R/library")
install.packages("mgcv", lib = "/Users/amina/anaconda2/lib/R/library")
install.packages("nlme", lib = "/Users/amina/anaconda2/lib/R/library")
install.packages("nlme", lib = "/Users/amina/anaconda2/lib/R/library")
install.packages("lattice", lib = "/Users/amina/anaconda2/lib/R/library")
install.packages("lattice", lib = "/Users/amina/anaconda2/lib/R/library")
detach("package:graphics", unload=TRUE)
detach("package:grDevices", unload=TRUE)
detach("package:methods", unload=TRUE)
detach("package:stats", unload=TRUE)
detach("package:utils", unload=TRUE)
install.packages("Matrix", lib = "/Users/amina/anaconda2/lib/R/library")
install.packages(c("car", "data.table", "digest", "DT", "htmlwidgets", "lme4", "MASS", "Matrix", "mgcv", "nlme", "quantreg", "Rcpp", "RcppEigen", "rpart", "yaml"))
library("tools", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
install.packages("Matrix", lib = "/Users/amina/anaconda2/lib/R/library")
install.packages("Matrix", lib = "/Users/amina/anaconda2/lib/R/library")
install.packages("Matrix", lib = "/Users/amina/anaconda2/lib/R/library")
library(extRemes)
val <- 7.392210
fevd(val, verbose=T)
debug(fevd)
library(extRemes)
val <- 7.392210
fevd(val, verbose=T)
ipars2
?fevd
data <- read.csv("/Users/amina/Documents/example.csv")
data
?file.exists
?tryCatch
tryCatch(stop(e), error = function(e) e, finally = print("Hello"))
e <- 44
tryCatch(stop(e), error = function(e) e, finally = print("Hello"))
}
buf <- 1
rdsname <- paste0("precip/", buf, "_precip.rds")
precip <- readRDS(rdsname)
precipname <- paste0("precip/", buf, "_ppdata.csv")
run_daily <- FALSE
include_zeros <- TRUE
## Get data for each commodity
#lets get the sorghum we want specificially & merge in seasonality
sorghum <- filter_grain(pp_data, "Sorghum")
sorghum <- merge_seasons(sorghum, "sorghum")
#get locations with the right set of dates
sorghum <- filter_dates(sorghum, "Sorghum")
#calcualte precip for correct set of dates
source('~/Documents/Stanford/precip-price/functions_for_analysis.R', echo=TRUE)
# Source files with functions useful/data prep
setwd("/Users/amina/Documents/Stanford/precip-price")
price <- readRDS("saved-output/formatted-price.rds")
all_final <- c()
bufs <- c(.25,1,2)
# Arguments to change depending on what you want to run
run_daily <- FALSE
include_zeros <- TRUE
buf <- 1
rdsname <- paste0("precip/", buf, "_precip.rds")
precip <- readRDS(rdsname)
precipname <- paste0("precip/", buf, "_ppdata.csv")
run_daily <- FALSE
include_zeros <- TRUE
## Get data for each commodity
#lets get the sorghum we want specificially & merge in seasonality
sorghum <- filter_grain(pp_data, "Sorghum")
source(paste0(getwd(), "/functions_for_analysis.R"))
## Get data for each commodity
#lets get the sorghum we want specificially & merge in seasonality
sorghum <- filter_grain(pp_data, "Sorghum")
sorghum <- merge_seasons(sorghum, "sorghum")
#get locations with the right set of dates
sorghum <- filter_dates(sorghum, "Sorghum")
#calcualte precip for correct set of dates
sorghum <- calc_precip(sorghum, daily = run_daily, zeros = include_zeros)
sorghum$type[1]
buf <- 1
rdsname <- paste0("precip/", buf, "_precip.rds")
precip <- readRDS(rdsname)
precipname <- paste0("precip/", buf, "_ppdata.csv")
run_daily <- FALSE
include_zeros <- TRUE
## Get data for each commodity
#lets get the sorghum we want specificially & merge in seasonality
sorghum <- filter_grain(pp_data, "Sorghum")
sorghum <- merge_seasons(sorghum, "sorghum")
#get locations with the right set of dates
sorghum <- filter_dates(sorghum, "Sorghum")
#calcualte precip for correct set of dates
sorghum <- calc_precip(sorghum, daily = run_daily, zeros = include_zeros)
#lets get the millet we want specificially & merge in seasonality
millet <- filter_grain(pp_data, "Millet")
millet <- merge_seasons(millet, "millet")
#get locations with the right set of dates
millet <- filter_dates(millet, "Millet")
#calcualte precip for correct set of dates
millet <- calc_precip(millet, daily = run_daily, zeros = include_zeros)
#lets get the maize we want specificially & merge in seasonality
maize <- filter_grain(pp_data, "Maize")
maize <- merge_seasons(maize, "maize")
#get locations with the right set of dates
maize <- filter_dates(maize, "Maize")
#calcualte precip for correct set of dates
maize <- calc_precip(maize, daily = run_daily, zeros = include_zeros)
## mins and maxs
ymaxs <- c(1, .5, 1.2, 1, .2)
ymins <- c(-1, -.5, -1, -1, -.2)
ys <- cbind(rep("sorghum", 5), ymaxs, ymins)
ymaxs <- c(.5, .5, 1, 3, .5)
ymins <- c(-.5, -.5, -1, -12, -.5)
ys <- rbind(ys, cbind(rep("millet", 5), ymaxs, ymins))
ymaxs <- c(.5, 1, 1, .2, .2)
ymins <- c(-1, -.5, -1, -.2, -.2)
ys <- rbind(ys, cbind(rep("maize", 5), ymaxs, ymins))
par(mfrow=c(3,2))
comps <- read.csv("model-comps/Model_Comps_Master.csv", stringsAsFactors = F)
types <- c("p_sow", "p_grow", "p_harv", "p_sup", "p_onemonth")
#lib: 4 = standard, 5 = retail only, 6 = Daily Average, 7 = Daily Average No Days below 1mm
# 8 = Avg, > 0
type <- 8
comps_plot <- comps %>% filter(Buffer == buf)
for(i in 1:nrow(comps_plot)) {
#select the current row, and make sure it's usable
row <- comps_plot[i,]
title <- paste(row$Grain, row$time_period, row[type], "buf=", buf, ">0")
#If this is the first of a new section, plot just simple title before continuing
if((i %% 5) == 1) {
plot(c(0, 1), c(0, 1), ann = F, bty = 'n', type = 'n', xaxt = 'n', yaxt = 'n')
text(x = 0.5, y = 0.5, paste(row$Grain), cex = 1.6, col = "black")
}
#get the right data and level
data <- switch(row$Grain,
"sorghum" = sorghum,
"maize" = maize,
"millet" = millet)
level <- switch(as.character(row[type]),
"Log_Linear" = 1,
"Log_2" = 2,
"Log_3" = 3,
"Log_Log" = "log")
#if there is no level, plot title and move on
if(is.na(row[type])) {
plot(c(0, 1), c(0, 1), ann = F, bty = 'n', type = 'n', xaxt = 'n', yaxt = 'n')
text(x = 0.5, y = 0.5, paste(title, "No Ideal Model"), cex = 1.6, col = "black")
next
}
#get model
mod <- get_model_regression(data, row$time_period, level, log=TRUE)
#create bootstrap name based on grain, buffer, time period, avg/accumulated, and zeroes/nozeros
bootname <- paste0(data$type[1], "_", buf, "_", row$time_period, "_")
bootname <- ifelse(run_daily, paste0(bootname, "average_"), paste0(bootname, "accumulated_"))
bootname <- ifelse(include_zeros, paste0(bootname, "zeros.rds"), paste0(bootname, "nozeros.rds"))
boots <- bootstrap_data(data, mod, row$time_period, xrange=0:400, level=level, log=TRUE, short = F, name = bootname)
#plot with the title
x <- boots[[2]]
yy <- boots[[3]]
coef <- boots[[1]]
bts <- matrix(nrow=100,ncol=length(x))
if(level == 2) {
for (j in 1:100) {
yy <- x*coef[j,1] + x^2*coef[j,2]
yy <- yy - yy[x=80]
bts[j,] <- yy
}
} else if (level == 3) {
for (j in 1:100) {
yy <- x*coef[j,1] + x^2*coef[j,2] + x^3*coef[j,3]
yy <- yy - yy[x=80]
bts[j,] <- yy
}
} else {
for (j in 1:100) {
yy <- x*coef[j]
yy <- yy - yy[x=80]
bts[j,] <- yy
}
}
confint <- apply(bts,2,function(x) quantile(x,probs=c(0.05,0.5,0.95)))
plot(100,xlim=c(0,400),ylim=c(as.numeric(ys[i,3]),as.numeric(ys[i,2])),las=1,xlab="precip",ylab="value", main=title)
polygon(c(x,rev(x)),c(confint[1,],rev(confint[3,])),col="darkolivegreen3",border = NA)
lines(x,confint[2,])  #median estimate across bootstraps
}
ifelse(dir.exists("/Users/amina/Documents/Stanford/precip-price"),
setwd("/Users/amina/Documents/Stanford/precip-price"),
setwd("/oak/stanford/groups/omramom/group_members/aminaly/precip-price"))
price <- readRDS("saved-output/formatted-price.rds")
ifelse(dir.exists("/Users/amina/Documents/Stanford/precip-price"),
setwd("/Users/amina/Documents/Stanford/precip-price"),
setwd("/oak/stanford/groups/omramom/group_members/aminaly/precip-price"))
price <- readRDS("saved-output/formatted-price.rds")
buf <- 1
rdsname <- paste0("precip/", buf, "_precip.rds")
precip <- readRDS(rdsname)
precipname <- paste0("precip/", buf, "_ppdata.csv")
run_daily <- FALSE
include_zeros <- TRUE
## Get data for each commodity
#lets get the sorghum we want specificially & merge in seasonality
sorghum <- filter_grain(pp_data, "Sorghum")
precipname <- paste0("precip/", buf, "_ppdata.csv")
source(paste0(getwd(), "/functions_for_analysis.R"))
run_daily <- FALSE
include_zeros <- TRUE
## Get data for each commodity
#lets get the sorghum we want specificially & merge in seasonality
sorghum <- filter_grain(pp_data, "Sorghum")
sorghum <- merge_seasons(sorghum, "sorghum")
#get locations with the right set of dates
sorghum <- filter_dates(sorghum, "Sorghum")
#calcualte precip for correct set of dates
sorghum <- calc_precip(sorghum, daily = run_daily, zeros = include_zeros)
#lets get the millet we want specificially & merge in seasonality
millet <- filter_grain(pp_data, "Millet")
millet <- merge_seasons(millet, "millet")
#get locations with the right set of dates
millet <- filter_dates(millet, "Millet")
#calcualte precip for correct set of dates
millet <- calc_precip(millet, daily = run_daily, zeros = include_zeros)
buf <- 1
#lets get the millet we want specificially & merge in seasonality
millet <- filter_grain(pp_data, "Millet")
millet <- merge_seasons(millet, "millet")
#get locations with the right set of dates
millet <- filter_dates(millet, "Millet")
#calcualte precip for correct set of dates
millet <- calc_precip(millet, daily = run_daily, zeros = include_zeros)
#lets get the maize we want specificially & merge in seasonality
maize <- filter_grain(pp_data, "Maize")
maize <- merge_seasons(maize, "maize")
#get locations with the right set of dates
maize <- filter_dates(maize, "Maize")
#calcualte precip for correct set of dates
maize <- calc_precip(maize, daily = run_daily, zeros = include_zeros)
## mins and maxs
ymaxs <- c(1, .5, 1.2, 1, .2)
ymins <- c(-1, -.5, -1, -1, -.2)
ys <- cbind(rep("sorghum", 5), ymaxs, ymins)
ymaxs <- c(.5, .5, 1, 3, .5)
ymins <- c(-.5, -.5, -1, -12, -.5)
ys <- rbind(ys, cbind(rep("millet", 5), ymaxs, ymins))
ymaxs <- c(.5, 1, 1, .2, .2)
ymins <- c(-1, -.5, -1, -.2, -.2)
ys <- rbind(ys, cbind(rep("maize", 5), ymaxs, ymins))
par(mfrow=c(3,2))
comps <- read.csv("model-comps/Master_Model_Comps.csv", stringsAsFactors = F)
types <- c("p_sow", "p_grow", "p_harv", "p_sup", "p_onemonth")
comps_plot <- comps %>% filter(Buffer == buf)
comps
head(comps_plot)
head(comps)
par(mfrow=c(3,2))
comps <- read.csv("model-comps/Master_Model_Comps.csv", stringsAsFactors = F)
types <- c("p_sow", "p_grow", "p_harv", "p_sup", "p_onemonth")
comps_plot <- comps %>% filter(buffer == buf) %>% filter(daily == run_daily) %>% filter(zeros == include_zeros)
for(i in 1:nrow(comps_plot)) {
#select the current row, and make sure it's usable
row <- comps_plot[i,]
title <- paste(row$Grain, row$time_period, row[type], "buf=", buf, ">0")
#If this is the first of a new section, plot just simple title before continuing
if((i %% 5) == 1) {
plot(c(0, 1), c(0, 1), ann = F, bty = 'n', type = 'n', xaxt = 'n', yaxt = 'n')
text(x = 0.5, y = 0.5, paste(row$Grain), cex = 1.6, col = "black")
}
#get the right data and level
data <- switch(row$Grain,
"sorghum" = sorghum,
"maize" = maize,
"millet" = millet)
level <- switch(as.character(row[type]),
"Log_Linear" = 1,
"Log_2" = 2,
"Log_3" = 3,
"Log_Log" = "log")
#if there is no level, plot title and move on
if(is.na(row[type])) {
plot(c(0, 1), c(0, 1), ann = F, bty = 'n', type = 'n', xaxt = 'n', yaxt = 'n')
text(x = 0.5, y = 0.5, paste(title, "No Ideal Model"), cex = 1.6, col = "black")
next
}
#get model
mod <- get_model_regression(data, row$time_period, level, log=TRUE)
#create bootstrap name based on grain, buffer, time period, avg/accumulated, and zeroes/nozeros
bootname <- paste0(data$type[1], "_", buf, "_", row$time_period, "_")
bootname <- ifelse(run_daily, paste0(bootname, "average_"), paste0(bootname, "accumulated_"))
bootname <- ifelse(include_zeros, paste0(bootname, "zeros.rds"), paste0(bootname, "nozeros.rds"))
boots <- bootstrap_data(data, mod, row$time_period, xrange=0:400, level=level, log=TRUE, short = F, name = bootname)
}
head(comps_plot)
for(i in 1:nrow(comps_plot)) {
#select the current row, and make sure it's usable
row <- comps_plot[i,]
title <- paste(row$Grain, row$time_period, "avg=", run_daily, "zeros=", include_zeros , "buf=", buf)
#If this is the first of a new section, plot just simple title before continuing
if((i %% 5) == 1) {
plot(c(0, 1), c(0, 1), ann = F, bty = 'n', type = 'n', xaxt = 'n', yaxt = 'n')
text(x = 0.5, y = 0.5, paste(row$Grain), cex = 1.6, col = "black")
}
#get the right data and level
data <- switch(row$Grain,
"sorghum" = sorghum,
"maize" = maize,
"millet" = millet)
level <- switch(as.character(row$model_choice),
"Log_Linear" = 1,
"Log_2" = 2,
"Log_3" = 3,
"Log_Log" = "log")
#if there is no level, plot title and move on
if(is.na(row$model_choice)) {
plot(c(0, 1), c(0, 1), ann = F, bty = 'n', type = 'n', xaxt = 'n', yaxt = 'n')
text(x = 0.5, y = 0.5, paste(title, "No Ideal Model"), cex = 1.6, col = "black")
next
}
#get model
mod <- get_model_regression(data, row$time_period, level, log=TRUE)
#create bootstrap name based on grain, buffer, time period, avg/accumulated, and zeroes/nozeros
bootname <- paste0(data$type[1], "_", buf, "_", row$time_period, "_")
bootname <- ifelse(run_daily, paste0(bootname, "average_"), paste0(bootname, "accumulated_"))
bootname <- ifelse(include_zeros, paste0(bootname, "zeros.rds"), paste0(bootname, "nozeros.rds"))
boots <- bootstrap_data(data, mod, row$time_period, xrange=0:400, level=level, log=TRUE, short = F, name = bootname)
}
for(i in 1:nrow(comps_plot)) {
#select the current row, and make sure it's usable
row <- comps_plot[i,]
title <- paste(row$grain, row$time_period, "avg=", run_daily, "zeros=", include_zeros , "buf=", buf)
#If this is the first of a new section, plot just simple title before continuing
if((i %% 5) == 1) {
plot(c(0, 1), c(0, 1), ann = F, bty = 'n', type = 'n', xaxt = 'n', yaxt = 'n')
text(x = 0.5, y = 0.5, paste(row$grain), cex = 1.6, col = "black")
}
#get the right data and level
data <- switch(row$Grain,
"sorghum" = sorghum,
"maize" = maize,
"millet" = millet)
level <- switch(as.character(row$model_choice),
"Log_Linear" = 1,
"Log_2" = 2,
"Log_3" = 3,
"Log_Log" = "log")
#if there is no level, plot title and move on
if(is.na(row$model_choice)) {
plot(c(0, 1), c(0, 1), ann = F, bty = 'n', type = 'n', xaxt = 'n', yaxt = 'n')
text(x = 0.5, y = 0.5, paste(title, "No Ideal Model"), cex = 1.6, col = "black")
next
}
#get model
mod <- get_model_regression(data, row$time_period, level, log=TRUE)
#create bootstrap name based on grain, buffer, time period, avg/accumulated, and zeroes/nozeros
bootname <- paste0(data$type[1], "_", buf, "_", row$time_period, "_")
bootname <- ifelse(run_daily, paste0(bootname, "average_"), paste0(bootname, "accumulated_"))
bootname <- ifelse(include_zeros, paste0(bootname, "zeros.rds"), paste0(bootname, "nozeros.rds"))
boots <- bootstrap_data(data, mod, row$time_period, xrange=0:400, level=level, log=TRUE, short = F, name = bootname)
}
for(i in 1:nrow(comps_plot)) {
#select the current row, and make sure it's usable
row <- comps_plot[i,]
title <- paste(row$grain, row$time_period, "avg=", run_daily, "zeros=", include_zeros , "buf=", buf)
#If this is the first of a new section, plot just simple title before continuing
if((i %% 5) == 1) {
plot(c(0, 1), c(0, 1), ann = F, bty = 'n', type = 'n', xaxt = 'n', yaxt = 'n')
text(x = 0.5, y = 0.5, paste(row$grain), cex = 1.6, col = "black")
}
#get the right data and level
data <- switch(row$grain,
"sorghum" = sorghum,
"maize" = maize,
"millet" = millet)
level <- switch(as.character(row$model_choice),
"Log_Linear" = 1,
"Log_2" = 2,
"Log_3" = 3,
"Log_Log" = "log")
#if there is no level, plot title and move on
if(is.na(row$model_choice)) {
plot(c(0, 1), c(0, 1), ann = F, bty = 'n', type = 'n', xaxt = 'n', yaxt = 'n')
text(x = 0.5, y = 0.5, paste(title, "No Ideal Model"), cex = 1.6, col = "black")
next
}
#get model
mod <- get_model_regression(data, row$time_period, level, log=TRUE)
#create bootstrap name based on grain, buffer, time period, avg/accumulated, and zeroes/nozeros
bootname <- paste0(data$type[1], "_", buf, "_", row$time_period, "_")
bootname <- ifelse(run_daily, paste0(bootname, "average_"), paste0(bootname, "accumulated_"))
bootname <- ifelse(include_zeros, paste0(bootname, "zeros.rds"), paste0(bootname, "nozeros.rds"))
boots <- bootstrap_data(data, mod, row$time_period, xrange=0:400, level=level, log=TRUE, short = F, name = bootname)
}
comps
comps[,15]
comps[15,]
comps[55,]
is.na(comps[55,]$model_choice)
(comps[55,]$model_choice) == ""
