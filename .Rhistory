ndvi_folders
### MARKETS SETUP
#get market locations
locs <- unique(price[,c(1:2,16:17)])
locs <- locs[which(locs$latitude < 999),]
# Transform your markets
markets = st_as_sf(locs,coords=c("longitude","latitude"))
st_crs(markets) <- 4326
markets <- st_transform(markets, 4326)
### CALCULATIONS FOR NDVI
#Extract over points and get NDVI data only in croplands and then collective NDVI in market area
ndvi_data <- c()
bufs <- c(.25, .5, .75, 1, 2, 3, 4, 5)
# Used by calc to get the date of the inflection point and make a flattened raster of it
# this is done by using ese in the 'inflection' package
get_inflection <- function(y, yr, timing) {
if(all(is.na(y))) return(-1)
#find the max NDVI value. This is peak growing season
peak_grow_date <- which.max(y)
# get rid of NAs and select only time after or before peak growing based on user input
y <- na.omit(y)
if(timing =="pre") {
y_p <- y[1:peak_grow_date]
} else {
y_p <- y[peak_grow_date:length(y)]
}
xs <- 1:length(y_p)
ind <- tryCatch({
check_curve(xs, y_p)$index
}, error = function(e) {
-1
})
if(ind == -1) return(-1)
inflec <- ese(xs, y_p, ind)[3]
ifelse(timing == "pre", day <- peak_grow_date - inflec, day <- peak_grow_date + inflec)
timing <- to_month(day, yr)
return(timing)
}
## Given a day and year, return a date object of the correct month
to_month <- function(day, year) {
first <- as.Date(paste0("1/1/", year), format="%m/%d/%Y")
return(month(first+(day-1)))
}
ndvi_folders[1]
# Run through  ndvi stacks and:
# 1. mask by croplands then
# 2. flatten and return single raster of inflection month then
# 3. extract over buffers
yrs <- c()
i <- 2
#Get NDVI and prep it to be masked by croplands
ndvi_files <- list.files(ndvi_folders[i], full.names = T, pattern = "*.nc")
nd_stack <- stack(ndvi_files) %>% crop(c(20,30,0,10))
#mask by croplands first
cl_agg_resampled <- projectRaster(cl_aggregated, nd_stack, method='bilinear')
masked_nd <- mask(nd_stack, cl_agg_resampled)
#flatten the stack to only get the inflection points
yr <- str_sub(ndvi_folders[i], start = -4)
yrs <- c(yrs, yr)
nd_flat_pre <- calc(masked_nd, function(x){get_inflection(x, yr, "pre")})
plot(nd_flat_pre)
#add to the stack
ifelse(exists('season_start'), season_start <- stack(season_start, nd_flat_pre), season_start <- nd_flat_pre)
exists(season_start)
exists("season_start")
stack(season_start, nd_flat_pre)
season_start <- stack(season_start, nd_flat_pre)
#add to the stack
ifelse(exists('season_start'), season_start <- stack(season_start, nd_flat_pre), season_start <- nd_flat_pre)
rm(season_start)
#add to the stack
ifelse(exists('season_start'), season_start <- stack(season_start, nd_flat_pre), season_start <- nd_flat_pre)
nd_flat_max <- calc(masked_nd, function(x){max(x, na.rm=T)})
nd_flat_post <- calc(masked_nd, function(x){get_inflection(x, yr, "post")})
#add to the stack
if(!exists('season_start')) {
season_start <- nd_flat_pre
season_end <- nd_flat_post
season_mid <- nd_flat_max
} else {
season_start <- stack(season_start, nd_flat_pre)
season_end <- stack(season_end, nd_flat_post)
season_mid <- stack(season_mid, nd_flat_max)
}
rm(season_start)
#add to the stack
if(!exists('season_start')) {
season_start <- nd_flat_pre
season_end <- nd_flat_post
season_mid <- nd_flat_max
} else {
season_start <- stack(season_start, nd_flat_pre)
season_end <- stack(season_end, nd_flat_post)
season_mid <- stack(season_mid, nd_flat_max)
}
yrs
i<- 3
print(i)
#Get NDVI and prep it to be masked by croplands
ndvi_files <- list.files(ndvi_folders[i], full.names = T, pattern = "*.nc")
nd_stack <- stack(ndvi_files) %>% crop(c(20,30,0,10))
#mask by croplands first
cl_agg_resampled <- projectRaster(cl_aggregated, nd_stack, method='bilinear')
masked_nd <- mask(nd_stack, cl_agg_resampled)
#flatten the stack to only get the inflection points
yr <- str_sub(ndvi_folders[i], start = -4)
yrs <- c(yrs, yr)
nd_flat_pre <- calc(masked_nd, function(x){get_inflection(x, yr, "pre")})
nd_flat_post <- calc(masked_nd, function(x){get_inflection(x, yr, "post")})
nd_flat_max <- calc(masked_nd, function(x){max(x, na.rm=T)})
#add to the stack
if(!exists('season_start')) {
season_start <- nd_flat_pre
season_end <- nd_flat_post
season_mid <- nd_flat_max
} else {
season_start <- stack(season_start, nd_flat_pre)
season_end <- stack(season_end, nd_flat_post)
season_mid <- stack(season_mid, nd_flat_max)
}
i
#Get NDVI and prep it to be masked by croplands
ndvi_files <- list.files(ndvi_folders[i], full.names = T, pattern = "*.nc")
nd_stack <- stack(ndvi_files) %>% crop(c(20,30,0,10))
ndvi_files
ls
ndvi_files
ndvi_folders
i <- 2
#Get NDVI and prep it to be masked by croplands
ndvi_files <- list.files(ndvi_folders[i], full.names = T, pattern = "*.nc")
length(ndvi_files)
i <- 13
ndvi_files
#get all NDVI directories (one a year)
ndvi_folders <- list.dirs("../www.ncei.noaa.gov/data/avhrr-land-normalized-difference-vegetation-index/access/", full.names = T)
num_folders <- length(ndvi_folders)
#Get NDVI and prep it to be masked by croplands
ndvi_files <- list.files(ndvi_folders[i], full.names = T, pattern = "*.nc")
nd_stack <- stack(ndvi_files) %>% crop(c(20,30,0,10))
#mask by croplands first
cl_agg_resampled <- projectRaster(cl_aggregated, nd_stack, method='bilinear')
masked_nd <- mask(nd_stack, cl_agg_resampled)
ndvi_files
#get all NDVI directories (one a year)
ndvi_folders <- list.dirs("../www.ncei.noaa.gov/data/avhrr-land-normalized-difference-vegetation-index/access", full.names = T)
num_folders <- length(ndvi_folders)
#Get NDVI and prep it to be masked by croplands
ndvi_files <- list.files(ndvi_folders[i], full.names = T, pattern = "*.nc")
nd_stack <- stack(ndvi_files) %>% crop(c(20,30,0,10))
warnings()
#mask by croplands first
cl_agg_resampled <- projectRaster(cl_aggregated, nd_stack, method='bilinear')
masked_nd <- mask(nd_stack, cl_agg_resampled)
#flatten the stack to only get the inflection points
yr <- str_sub(ndvi_folders[i], start = -4)
yrs <- c(yrs, yr)
nd_flat_pre <- calc(masked_nd, function(x){get_inflection(x, yr, "pre")})
undebug(calc)
undebug(get_inflection)
nd_flat_post <- calc(masked_nd, function(x){get_inflection(x, yr, "post")})
nd_flat_max <- calc(masked_nd, function(x){max(x, na.rm=T)})
#add to the stack
if(!exists('season_start')) {
season_start <- nd_flat_pre
season_end <- nd_flat_post
season_mid <- nd_flat_max
} else {
season_start <- stack(season_start, nd_flat_pre)
season_end <- stack(season_end, nd_flat_post)
season_m
id <- stack(season_mid, nd_flat_max)
}
season_start <- nd_flat_pre
season_end <- nd_flat_post
season_mid <- nd_flat_max
yrs <- "2018"
season_start <- setZ(season_start, yrs)
season_end <- setZ(season_end, yrs)
season_mid <- seZ(season_mid, yrs)
season_mid <- setZ(season_mid, yrs)
#save out the season stacks
saveRDS(season_end, "/saved-output/ndvi_sesonality/season_end_2018.rds")
~
""
"~"
getwd()
#save out the season stacks
saveRDS(season_end, paste0(getwd(), "/saved-output/ndvi_sesonality/season_end_2018.rds"))
#save out the season stacks
saveRDS(season_end, paste0(getwd(), "/saved-output/ndvi_seasonality/season_end_2018.rds"))
saveRDS(season_start, paste0(getwd(), "/saved-output/ndvi_seasonality/season_start_2018.rds"))
saveRDS(season_start, paste0(getwd(), "/saved-output/ndvi_seasonality/season_mid_2018.rds"))
#save out the season stacks
saveRDS(season_end, "/saved-output/ndvi_seasonality/season_end_2018.rds")
rdsname
buf <- bufs[1]
#check to see if we've extracted before
rdsname <- paste0("saved-output/ndvi_seasonality/", buf, "_avg_season.rds")
if(file.exists(paste0(getwd(), rdsname))) stop("Already exists")
# set up the buffers for your markets
markets_buffer = st_buffer(markets, buf)
markets_buffer <- as(markets_buffer, 'Spatial')
markets
# set up the buffers for your markets
markets_buffer = st_buffer(markets, buf)
markets_buffer
# Transform your markets
markets = st_as_sf(locs,coords=c("longitude","latitude"))
st_crs(markets) <- 4326
markets <- st_transform(markets, 4326)
# set up the buffers for your markets
markets_buffer = st_buffer(markets, buf)
markets
# Transform your markets
markets = st_as_sf(locs,coords=c("longitude","latitude"))
markets
st_crs(markets) <- 4326
markets <- st_transform(markets, 4326)
markets
markets = st_as_sf(locs,coords=c("longitude","latitude"))
st_crs(markets) <- 4326
markets <- st_transform(markets, 4326)
# set up the buffers for your markets
markets_buffer = st_buffer(markets, buf)
markets_buffer <- as(markets_buffer, 'Spatial')
plot(markets_buffer)
m_b <- markets_buffer %>% crop(c(20,30,0,10))
plot(m_b)
m_b
m_b <- markets_buffer %>% crop(c(20,30,0,10))
m_b
markets
m_b <- markets_buffer %>% crop(extent(season_start)
)
m_b
# set up the buffers for your markets
markets_buffer = st_buffer(markets, buf)
st_crs(markets) <- 4326
markets <- st_transform(markets, 4326)
# set up the buffers for your markets
markets_buffer = st_buffer(markets, buf)
# Transform your markets
markets = st_as_sf(locs,coords=c("longitude","latitude"))
remove.packages("sp")
library('sp')
library(sp)
remove.packages(sp)
remove.packages('sp')
detach(sp)
install.packages('sp')
install.packages("sp")
detach('sp')
detach('package:sp', unload=T)
library('sf')
# Transform your markets
markets = st_as_sf(locs,coords=c("longitude","latitude"))
markets
# set up the buffers for your markets
markets_buffer = st_buffer(markets, buf)
markets_buffer <- as(markets_buffer, 'Spatial')
plot(markets_buffer)
plot(season_end)
plot(markets_buffer, add = T)
st_crs(markets_buffer) <- 4326
markets_buffer
st_transform(markets_buffer, 4326)
plot(markets_buffer)
plot(markets_buffer, axes = T)
?bbox
library(sp)
?bbox
install.packages('sp')
### SETUP
library(sf); library(raster)
library(velox); library(lfe); library(ncdf4)
library(rgdal); library(lubridate); library(inflection)
library(stringr)
markets = st_as_sf(locs,coords=c("longitude","latitude"))
st_crs(markets) <- 4326
markets <- st_transform(markets, 4326)
# set up the buffers for your markets
markets_buffer = st_buffer(markets, buf)
markets_buffer <- as(markets_buffer, 'Spatial')
plot(markets_buffer)
?bbox
b <- markets_buffer %>% crop(extent(season_end))
plot(b)
b
b <- markets %>% crop(extent(season_end))
markets
## loop through every layer, for each unique location label and find precip, and add to table
locs <- unique(price[,c(1:2,16:17)])
locs <- locs[which(locs$latitude < 999),]
# Transform your markets
markets = st_as_sf(locs,coords=c("longitude","latitude"))
st_crs(markets) <- 4326
markets <- st_transform(markets, 4326)
# set up the buffers for your markets
markets_buffer = st_buffer(markets, buf)
buf
# set up the buffers for your markets
markets_buffer = st_buffer(markets, 1)
plot(markets_buffer)
plot(markets_buffer %>% crop(extent(nd_flat_max)))
## This is the file that will run through every single NDVI and first crop by 'croplands'
## and then extract over markets
### SETUP
library(sf); library(raster)
library(velox); library(lfe); library(ncdf4)
library(rgdal); library(lubridate); library(inflection)
library(stringr)
ifelse(dir.exists("/Users/amina/Documents/Stanford/precip-price"),
setwd("/Users/amina/Documents/Stanford/precip-price"),
ifelse(dir.exists("/Users/aminaly/Box Sync/precip-price"),
setwd("/Users/aminaly/Box Sync/precip-price"),
setwd("/oak/stanford/groups/omramom/group_members/aminaly/precip-price")))
#get price data
price <- readRDS("saved-output/formatted-price.rds")
## pick up args from commandline/sbatch
# years <- c(2007:2017)
# args <- commandArgs(trailingOnly = TRUE)
# y <- as.numeric(args[1])
# year <- years[y]
### CROPLAND PREP
## This doesn't have to be run more than once so it's commented out
## read in the cropland tif file as raster and prep it
#croplands <- raster("../mosaic_cropland.tif", RAT = T)
#cl <- croplands %>% crop(c(20,30,0,10))
#cl <- clamp(cl, lower=2, useValues=FALSE)
# percent of cell that is croplands
#perc <- function(x, na.rm = F) {
#  return( sum(!is.na(x)) / length(x))
#}
# aggregate the cropland data to match ndvi
#cl_aggregated <- raster::aggregate(cl, (37106/200), fun = perc)
# zeros should become NA
#cl_aggregated[cl_aggregated == 0] <- NA
#saveRDS(cl_aggregated, "./saved-output/aggregated_croplands.rds")
cl_aggregated <- readRDS("./saved-output/aggregated_croplands.rds")
#get all NDVI directories (one a year)
ndvi_folders <- list.dirs("../www.ncei.noaa.gov/data/avhrr-land-normalized-difference-vegetation-index/access", full.names = T)
num_folders <- length(ndvi_folders)
### CALCULATIONS FOR NDVI
#Extract over points and get NDVI data only in croplands and then collective NDVI in market area
ndvi_data <- c()
bufs <- c(.25, .5, .75, 1, 2, 3, 4, 5)
# Used by calc to get the date of the inflection point and make a flattened raster of it
# this is done by using ese in the 'inflection' package
get_inflection <- function(y, yr, timing) {
if(all(is.na(y))) return(-1)
#find the max NDVI value. This is peak growing season
peak_grow_date <- which.max(y)
# get rid of NAs and select only time after or before peak growing based on user input
y <- na.omit(y)
if(timing =="pre") {
y_p <- y[1:peak_grow_date]
} else {
y_p <- y[peak_grow_date:length(y)]
}
xs <- 1:length(y_p)
ind <- tryCatch({
check_curve(xs, y_p)$index
}, error = function(e) {
-1
})
if(ind == -1) return(-1)
inflec <- ese(xs, y_p, ind)[3]
ifelse(timing == "pre", day <- peak_grow_date - inflec, day <- peak_grow_date + inflec)
timing <- to_month(day, yr)
return(timing)
}
## Given a day and year, return a date object of the correct month
to_month <- function(day, year) {
first <- as.Date(paste0("1/1/", year), format="%m/%d/%Y")
return(month(first+(day-1)))
}
ndvi_files <- list.files("../www.ncei.noaa.gov/data/avhrr-land-normalized-difference-vegetation-index/access/2015", full.names = T, pattern = ".nc")
nd_stack <- stack(ndvi_files) %>% crop(c(20,30,0,10))
#mask by croplands first
cl_agg_resampled <- projectRaster(cl_aggregated, nd_stack, method='bilinear')
masked_nd <- mask(nd_stack, cl_agg_resampled)
#flatten the stack to only get the inflection points
yr <- str_sub(ndvi_folders[i], start = -4)
yrs <- c(yrs, yr)
nd_flat_pre <- calc(masked_nd, function(x){get_inflection(x, yr, "pre")})
nd_flat_post <- calc(masked_nd, function(x){get_inflection(x, yr, "post")})
nd_flat_max <- calc(masked_nd, function(x){max(x, na.rm=T)})
season_start <- nd_flat_pre
season_end <- nd_flat_post
season_mid <- nd_flat_max
yrs <- 2015
#save out the season stacks
saveRDS(season_end, paste0(getwd(), "/saved-output/ndvi_seasonality/season_end_2015.rds"))
saveRDS(season_start, paste0(getwd(), "/saved-output/ndvi_seasonality/season_start_2015.rds"))
saveRDS(season_start, paste0(getwd(), "/saved-output/ndvi_seasonality/season_mid_2015.rds"))
plot(markets_buffer)
markets_buffer <- as(markets_buffer, 'Spatial')
plot(markets_buffer)
m_b <- markets_buffer %>% crop(c(20, 30, 0, 10))
plot(m_b)
markets
plot(markets)
rm(markets_buffer)
markets_bugger <- as(markets, 'Spatial')
plot(markets_bugger)
plot(markets)
markets_buffer = st_buffer(markets, buf)
markets = st_as_sf(locs,coords=c("longitude","latitude"))
st_crs(markets) <- 3857
markets <- st_transform(markets, 3857)
markets = st_as_sf(locs,coords=c("longitude","latitude"))
st_crs(markets) <- 3857
markets <- st_transform(markets, 3857)
# set up the buffers for your markets
markets_buffer = st_buffer(markets, buf)
markets_buffer <- as(markets_buffer, 'Spatial')
plot(markets_buffer)
m_b <- markets_buffer %>% crop(extent(nd_flat_max))
plot(m_b)
m_B
m_b
m_b <- markets_buffer %>% crop(c(20,30,0,10))
m_b
#keep only the countries we care about
price <- price %>% filter(country %in% c("Mauritania", "Chad", "Nigeria"))
price
head(price)
#keep only the countries we care about
price <- price %>% filter("country" %in% c("Mauritania", "Chad", "Nigeria"))
price
head(price)
library(dplyr)
#keep only the countries we care about
price <- price %>% filter("country" %in% c("Mauritania", "Chad", "Nigeria"))
#get price data
price <- readRDS("saved-output/formatted-price.rds")
#keep only the countries we care about
price <- price %>% filter("country" %in% c("Mauritania", "Chad", "Nigeria"))
head(price)
#get price data
price <- readRDS("saved-output/formatted-price.rds")
head(price)
unique(price$country)
#keep only the countries we care about
price <- price %>% filter("country" == c("Mauritania", "Chad", "Nigeria"))
#keep only the countries we care about
price <- price %>% filter(country %in% c("Mauritania", "Chad", "Nigeria"))
head(price)
#get market locations
locs <- unique(price[,c(1:2,16:17)])
locs <- locs[which(locs$latitude < 999),]
# Transform your markets
markets = st_as_sf(locs,coords=c("longitude","latitude"))
st_crs(markets) <- 3857
markets <- st_transform(markets, 3857)
# set up the buffers for your markets
markets_buffer = st_buffer(markets, buf)
markets_buffer <- as(markets_buffer, 'Spatial')
plot(season_end)
plot(season_start)
plot(season_mid)
year <- 2018
#lets extract some averages
#within the area of each of these markets
season_end <- readRDS(paste0("saved-output/ndvi_seasonlity/season_end_", year))
#lets extract some averages
#within the area of each of these markets
season_end <- readRDS(paste0("/saved-output/ndvi_seasonlity/season_end_", year))
#lets extract some averages
#within the area of each of these markets
season_end <- readRDS(paste0("~/saved-output/ndvi_seasonlity/season_end_", year))
#lets extract some averages
#within the area of each of these markets
season_end <- readRDS(paste0("./saved-output/ndvi_seasonlity/season_end_", year))
#lets extract some averages
#within the area of each of these markets
season_end <- readRDS(paste0(getwd(), "/saved-output/ndvi_seasonlity/season_end_", year))
#lets extract some averages
#within the area of each of these markets
season_end <- readRDS(paste0("/saved-output/ndvi_seasonlity/season_end_", year, ".rds"))
#lets extract some averages
#within the area of each of these markets
season_end <- readRDS(paste0("./saved-output/ndvi_seasonlity/season_end_", year, ".rds"))
#lets extract some averages
#within the area of each of these markets
season_end <- readRDS(paste0(getwd(), "/saved-output/ndvi_seasonlity/season_end_", year, ".rds"))
#lets extract some averages
#within the area of each of these markets
season_end <- readRDS(paste0("/saved-output/ndvi_seasonality/season_end_", year, ".rds"))
#lets extract some averages
#within the area of each of these markets
season_end <- readRDS(paste0("./saved-output/ndvi_seasonality/season_end_", year, ".rds"))
season_start <- readRDS(paste0("./saved-output/ndvi_seasonality/season_start_", year, ".rds"))
season_mid <- readRDS(paste0("./saved-output/ndvi_seasonality/season_mid_", year, ".rds"))
plot(season_start)
season_start <- readRDS(paste0("./saved-output/ndvi_seasonality/season_start_", year, ".rds"))
plot(season_start)
#lets extract some averages
#within the area of each of these markets
season_end <- readRDS(paste0(getwd(), "/saved-output/ndvi_seasonality/season_end_", year, ".rds"))
plot(season_End)
plot(season_end)
install.packages('rgdal')
library(rgdal)
plot(season_end)
update.packages()
library(rgdal)
#lets extract some averages
#within the area of each of these markets
season_end <- readRDS(paste0(getwd(), "/saved-output/ndvi_seasonality/season_end_", year, ".rds"))
plot(season_end)
